stages:
  - build
  - test
  - sonartest
  - docker
  - terraform_apply
  - deploy
  - cleanup

# Define the Docker image to be used for the job
image: python:3.8

variables:
  TF_DIR: ${CI_PROJECT_DIR}/Terraform
  STATE_NAME: "EKS-tf"
  ADDRESS: "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/terraform/state/${STATE_NAME}"


# Cache dependencies to speed up builds
cache:
  paths:
    - .venv/

# Build stage for Flask WebApp
build:
  stage: build
  script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install -r web/requirements.txt
  artifacts:
    paths:
      - .venv/

#Test Stage using PyTest
test:
  stage: test
  dependencies:
    - build
  script:
    - source .venv/bin/activate
    - pytest

#SonarCloud Checks
sonartest:
  stage: sonartest
  dependencies:
    - build
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner

# Docker build and push stage
docker_build:
  stage: docker
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
    - docker compose build --no-cache
    - docker tag prashun08/web prashun08/web:"$CI_PIPELINE_IID"
    - docker tag prashun08/db prashun08/db:"$CI_PIPELINE_IID"
    - docker push prashun08/web:"$CI_PIPELINE_IID"
    - docker push prashun08/db:"$CI_PIPELINE_IID"

# Terraform apply stage
terraform_apply:
  stage: terraform_apply
  image: 
    name: hashicorp/terraform:latest
    entrypoint: [""]
  before_script:
  - terraform --version
  - export GITLAB_ACCESS_TOKEN=$TOKEN
  - cd ${TF_DIR}
  - terraform init  -reconfigure -backend-config="address=${ADDRESS}" -backend-config="lock_address=${ADDRESS}/lock" -backend-config="unlock_address=${ADDRESS}/lock" -backend-config="username=<UseName>" -backend-config="password=$GITLAB_ACCESS_TOKEN" -backend-config="lock_method=POST" -backend-config="unlock_method=DELETE" -backend-config="retry_wait_min=5"
  script:
  - terraform apply -auto-approve
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
    - ${TF_DIR}/.terraform
    policy: pull-push

# Deploy stage
deploy:
  stage: deploy
  image: 
    name: amazon/aws-cli:latest
    entrypoint: [""]
  before_script:
    # Configure AWS CLI with your credentials
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY

    # Install kubectl
    - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl

    # Get EKS cluster details and configure kubectl
    - aws eks update-kubeconfig --name eks-prod --region us-east-1

  script:

    # Replace the placeholder with the actual Docker image tag
    - sed -i "s|{{IMAGE_TAG}}|${CI_PIPELINE_IID}|g" kube-manifests/mongo-deployment.yaml
    - sed -i "s|{{IMAGE_TAG}}|${CI_PIPELINE_IID}|g" kube-manifests/flask-deployment.yaml

    # Apply the Kubernetes manifests
    - kubectl apply -f kube-manifests/mongo-deployment.yaml
    - kubectl apply -f kube-manifests/mongo-service.yaml
    - kubectl apply -f kube-manifests/flask-deployment.yaml
    - kubectl apply -f kube-manifests/flask-service.yaml

    #Wait for 20s 
    - sleep 20
    - kubectl get svc flask-service
  dependencies:
    - terraform_apply

# Cleanup stage
cleanup:
  stage: cleanup
  image: 
    name: hashicorp/terraform:latest
    entrypoint: [""]
  script:
    - terraform destroy -auto-approve
  dependencies:
    - terraform_apply
    - deploy
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
    - ${TF_DIR}/.terraform
    policy: pull
  when: delayed
  start_in: 10 minutes



